-- 시퀀스(Sequence)
-- 오라클에서 중복되지 않는 값을 자동으로 생성하는 것
-- 보통 pk에 중복값을 방지하기 위해 사용한다.

-- 시퀀스 생성
-- CREATE SEQUENCE 시퀀스명;

-- 시퀀스 삭제
-- DROP SEQUENCE 시퀀스명;

-- 시퀀스 사용
-- 시퀀스명.NEXTVAL

/*
 * NULL
 * 정의되지 않은 값
 * PK는 불가능, FK 가능, UK 가능
 */

-- 조회시 NULL 값을 다른 값으로 변경
-- NVL(칼럼명, 값) : NULL 값 대신 다른 값으로 변경 후 조회
-- NVL2(칼럼명, NULL이 아닐 때 값, NULL일 때 값) 

TCL : 트랜잭션 제어어
	1. COMMIT
	  모든 작업(트랜잭션)을 확정하는 명령어
	2. ROLLBACK
	  모든 작업(트랜잭션)을 취소하고 이전 커밋 시점으로 되돌리는 명령어

트랜잭션
	- 하나의 작업 단위
	- 여러개의 SQL문의 묶음

트랜잭션 주의사항
	- DML에만 적용됨.

TRUNCATE와 DELETE의 차이
	- TRUNCATE : DDL (롤백 불가능)
	- DELETE : DML(롤백 가능)

============================================================================================

정규화
	- 삽입/수정/삭제의 이상현상을 제거하기 위한 작업
	- 데이터의 중복을 최소화하는데 목적이 있음.
	- 6차 정규화까지 있으나 3차 정규화까지만 진행함.

1차 정규화
	- 같은 칼럼의 여러 데이터를 넣은 경우
	- 같은 성격과 내용의 칼럼이 연속적으로 나타날 경우

EX)	상품명
	====================
	바지1, 바지2, 바지3

EX)	상품명1  상품명2  상품명3
	=======================
	바지1    바지2    바지3

	- 조회 및 검사가 힘들다.

1차 정규화 진행
	상품명
	=============
	바지1
	바지2
	바지3


2차 정규화
	복합키로 구성되었을 경우 복합키의 일부분에만 종속되는 속성이 있을 경우
	
	과자
	==========================================
	이름PK	맛PK	가격	제조사
	------------------------------------------
	포카칩	기본맛	1600	오리온
	포카칩	양파맛	1400	오리온
	포테토칩	오리지널	1500	농심
	포테토칩	양파맛	1700	농심

	- 이름만 알아도 제조사를 알 수 있다.
	제조사 칼럼이 복합키 중 이름에만 종속되어 있다.

2차 정규화 진행
	과자
	===============================================
	이름PK/FK	맛PK	가격
	-----------------------------------------------
	포카칩		기본맛	1600
	포카칩		양파맛	1400

	과자_제조사
	===============================================
	이름PK	제조사
	-----------------------------------------------
	포카칩	오리온


3치 정규화
	PK가 아닌 컬럼이 다른 컬럼을 결정하는 경우
	
	회원
	====================================================================
	회원번호PK	이름	시	구	동	우편번호
	--------------------------------------------------------------------
	1		김철수	서울시	송파구	가락동	11111
	2		홍길동	부산시	부산구	부산동	22222


	- 우편번호가 시, 구, 동을 결정한다.

3차 정규화 진행
	회원
	=====================================================================
	회원번호PK	이름	우편번호FK
	
	주소
	=====================================================================
	우편번호PK	시	구	동


데이터베이스에 정규화가 필요한 이유
	- 데이터베이스를 잘 못 설계하면 불필요한 데이터 중복으로인해 공간이 낭비된다.
	- 그 외 이상(Anomaly) 현상이 발생 될 수 있다.


학번PK		학생이름		전공	과목명PK		성적
============================================================================
111		홍길동		컴공	프로그래밍		90
111		홍길동		컴공	운영체제		89
222		김철수		전자	전자학		77
333		이유리		전자	논리회로		89
444		박웅이		간호	간호학개론		100


이상현상의 종류
1. 삽입 이상
	새로운 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야하는 문제

	신입생의 정보를 삽입하고 싶은데 아직 시험을 보지않아서 과목명이나 성적을 비워둬야한다.

2. 갱신 이상
	중복 행 중에서 일부만 변경하여 데이터가 불일치하게되는 모순의 문제
	
	'홍길동'학생이 전자과로 전과를 하게 되어 전공 칼럼의 값을 수정해야한다.
	여기서 홍길동의 전공을 모두 찾아 수정해야하는데 하나의 행만 수전한다면
	홍길동이 컴공인지 전자인지 알 수 없다.

3. 삭제 이상
	행을 삭제했을 때 필요한 데이터도 같이 삭제되는 문제
	
	'박웅이'학생이 자퇴하여 삭제해야하는데 간호학 학생이 박웅이 한 명이면
	간호학과에 대한 정보가 같이 삭제된다.

이러한 이상 현상을 예방하고자 정규화를 진행해야한다.

/*
 * 집계 함수 : 결과 행이 1개
 * 주의 사항 : NULL은 포함시키지 않는다. WHERE절에서는 사용이 불가능하다.
 * 
 * AVG() : 평균
 * MAX() : 최대값
 * MIN() : 최소값
 * SUM() : 총 합
 * COUNT() : 개수
*/

/*
 * GROUP BY : ~별 (예 :  포지션 별 평균키)
 * 
 * GROUP BY 칼럼명 HAVING 조건식
 * HAVING 조건식은 선택
 */

-- PLAYER테이블에서 포지션 종류 조회 -> 4개의 포지션
SELECT DISTINCT "POSITION" FROM PLAYER p ;

-- 오류가 발생
-- GROUP BY로 포지션을 그룹화하면 4개의 포지션이 나오게된다.
-- 4개의 행으로 데이터를 표현해야하는데
-- 선수들의 모든 정보를 4개행으로 표현하는것은 말이 안된다.
SELECT *  FROM PLAYER p
GROUP BY "POSITION" ; -- *은 안됌

-- 포지션을 GROUP BY로 묶어준다면
-- 묶어주는 포지션 칼럼을 조회하는게 좋다.
SELECT "POSITION"  FROM PLAYER p
GROUP BY "POSITION" ;

-- GROUP BY는 결과행을 1개만 반환하는 집계함수와 자주 쓰인다.
-- 아래 SQL문은 포지션별 평균키를 조회한다.
SELECT "POSITION",  AVG(HEIGHT) FROM PLAYER p
GROUP BY "POSITION" ;






































